---
- name: Config NCP
  hosts: single_master
  gather_facts: True
  vars_files:
    - ../answerfile.yml
  tasks:
    - block:
      ## Configure Service Account for NCP
      - name: Assign clusteradmin role to default user
        command: kubectl create clusterrolebinding default:default:clusteradmin --clusterrole cluster-admin --serviceaccount default:default
        ignore_errors: True

      
      ### Obtain YAML files to run NCP and nsx-node-agent
      - name: Download NCP yaml
        copy:
          src: ../files/ncp-rc-ubuntu.yml
          dest: /tmp/ncp-rc.yml
          force: yes
  
      - name: Set cluster name
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^ *#?cluster =.*"
          line: "    cluster = {{ k8s.cluster_name }}"
  
      - name: Set apiserver host IP
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^ *#?apiserver_host_ip =.*"
          line: "    apiserver_host_ip = {{ k8s.master_node }}"
      
      - name: Set apiserver host port
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^ *#?apiserver_host_port =.*"
          line: "    apiserver_host_port = 6443"
      
      - name: Set subnet to 27
        replace:
          path: /tmp/ncp-rc.yml
          regexp: "#subnet_prefix = 24"
          replace: "subnet_prefix = 27"
      
      - name: Set native load balacner
        replace:
          path: /tmp/ncp-rc.yml
          regexp: "#use_native_loadbalancer = False"
          replace: "use_native_loadbalancer = True"
      
      - name: Set load balacner algorithm
        replace:
          path: /tmp/ncp-rc.yml
          regexp: "#pool_algorithm = 'ROUND_ROBIN'"
          replace: "pool_algorithm = 'ROUND_ROBIN'"
      
      - name: Set load balacner size
        replace:
          path: /tmp/ncp-rc.yml
          regexp: "#service_size = 'SMALL'"
          replace: "service_size = 'SMALL'"
      
      - name: Set virtual servers
        replace:
          path: /tmp/ncp-rc.yml
          regexp: "#virtual_servers_per_lbs = 10"
          replace: "virtual_servers_per_lbs = 10"
  
      - name: Set T0 router
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^ *#?tier0_router =.*"
          line: "    tier0_router = {{ k8s.tier0_router }}"
  
      - name: Set overlay tz
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^ *#?overlay_tz =.*"
          line: "    overlay_tz = {{ k8s.overlay_tz }}"
  
      - name: Set ip block
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^ *#?container_ip_blocks =.*"
          line: "    container_ip_blocks = {{ k8s.container_ip_blocks }}"
  
      - name: Set external ip pool
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^ *#?external_ip_pools =.*"
          line: "    external_ip_pools = {{ k8s.external_ip_pools }}"
          
      - name: Set firewall top
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^ *#?top_firewall_section_marker =.*"
          line: "    top_firewall_section_marker = {{ k8s.top_firewall_section_marker }}"
          
      - name: Set firewall bottom
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^ *#?bottom_firewall_section_marker =.*"
          line: "    bottom_firewall_section_marker = {{ k8s.bottom_firewall_section_marker }}"
          
      - name: Set master node
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^ *#?kubernetes.io/hostname: .*"
          line: "        kubernetes.io/hostname: {{ k8s.master_node }}"
          
      - name: Set NSX manager IP
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^ *#?nsx_api_managers =.*"
          line: "    nsx_api_managers = {{ nsxt_manager.ip }}"
      
      - name: Set NSX API password
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^    nsx_api_password"
          insertafter: "^ *nsx_api_managers"
          line: "    nsx_api_password = {{ nsxt_manager.password | replace('$', '$$') }}"
      
      - name: Set NSX API username
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^    nsx_api_user"
          insertafter: "^ *nsx_api_managers"
          line: "    nsx_api_user = {{ nsxt_manager.username }}"
      
      - name: Skip checking certs
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^ *#?insecure =.*"
          line: "    insecure = True"
      
      - name: Start NCP Replication Controller
        command: kubectl apply -f /tmp/ncp-rc.yml
      
      ## nsx-node-agent YAML
      - name: copy agent yaml
        copy:
          src: ../files/nsx-node-agent-ds-ubuntu.yml
          dest: /tmp/nsx-node-agent-ds.yml
          force: yes
          
      - name: Set cluster name
        lineinfile:
          path: /tmp/nsx-node-agent-ds.yml
          regexp: "^ *#?cluster =.*"
          line: "    cluster = {{ k8s.cluster_name }}"
      
      - name: Set apiserver host IP
        lineinfile:
          path: /tmp/nsx-node-agent-ds.yml
          regexp: "^ *#?apiserver_host_ip =.*"
          line: "    apiserver_host_ip = {{ k8s.master_node }}"
      
      - name: Set apiserver host port
        lineinfile:
          path: /tmp/nsx-node-agent-ds.yml
          regexp: "^ *#?apiserver_host_port =.*"
          line: "    apiserver_host_port = 6443"
  
          
      - name: Start nsx-node-agent DaemonSet
        command: kubectl apply -f /tmp/nsx-node-agent-ds.yml
        
      when: ansible_distribution == 'Ubuntu'        
    - block:
      ## Configure Service Account for NCP
      - name: Check if nsx-system namespace exists
        command: kubectl get ns nsx-system
        register: nsx_project_result
        ignore_errors: True
      
      - name: Display the output msg
        debug:
          msg: "{{ nsx_project_result }}"
      
      - name: Create the namespace if it doesn't exist
        command: kubectl create ns nsx-system
        when: "'Error' in nsx_project_result.stderr"
      
      - command: kubectl get ns nsx-system
      
      - name: copy ncp-rbac
        copy:
          src: ../files/ncp-rbac.yml
          dest: /tmp/ncp-rbac.yml
          force: true
      
      - name: Apply ncp-rbac
        command: kubectl apply -f /tmp/ncp-rbac.yml
      
      - name: check if /etc/nsx-ujo dir exists
        stat:
          path: /etc/nsx-ujo
        register: ujo_exists
      
      - name: Create dir if missing
        file: path=/etc/nsx-ujo state=directory
        when:
          ujo_exists.stat.exists == False
      
      - name: Check if a token file is already present
        stat:
            path: /etc/nsx-ujo/ncp_token
        register: ncp_exists
      
      - name: Get token name for ncp
        shell: "kubectl get serviceaccount ncp-svc-account -o yaml | grep 'ncp-svc-account-token' | tail -n1 | awk {'print $3'}"
        register: ncp_secret_result
      
      - name: Copy ncp token to file
        shell: "kubectl describe secret {{ ncp_secret_result.stdout }} | grep 'token:' | awk {'print $2'} | base64 -d > /etc/nsx-ujo/ncp_token"
        ignore_errors: True
        
      - name: Check if a token file is already present
        stat:
            path: /etc/nsx-ujo/node_agent_token
        register: node_agent_exists
      
      - name: Get node agent token name
        shell: "kubectl get serviceaccount nsx-node-agent-svc-account -o yaml | grep 'nsx-node-agent-svc-account-token' | tail -n1 | awk {'print $3'}"
        register: node_agent_secret_result
      
      
      - name: Copy node agent to file
        shell: "kubectl describe secret {{ node_agent_secret_result.stdout }} | grep 'token:' | awk {'print $2'} | base64 -d > /etc/nsx-ujo/node_agent_token"
        ignore_errors: True  
      
      ### Obtain YAML files to run NCP and nsx-node-agent
      - name: Download NCP yaml
        copy:
          src: ../files/ncp-rc.yml
          dest: /tmp/ncp-rc.yml
          force: yes
  
      - name: Set cluster name
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^ *#?cluster =.*"
          line: "    cluster = {{ cluster_name }}"
  
      - name: Set apiserver host IP
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^ *#?apiserver_host_ip =.*"
          line: "    apiserver_host_ip = {{ apiserver_host_ip }}"
      
      - name: Set apiserver host port
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^ *#?apiserver_host_port =.*"
          line: "    apiserver_host_port = 6443"
      
      - name: Set subnet to 27
        replace:
          path: /tmp/ncp-rc.yml
          regexp: "#subnet_prefix = 24"
          replace: "subnet_prefix = 27"
      
      - name: Set native load balacner
        replace:
          path: /tmp/ncp-rc.yml
          regexp: "#use_native_loadbalancer = False"
          replace: "use_native_loadbalancer = True"
      
      - name: Set load balacner algorithm
        replace:
          path: /tmp/ncp-rc.yml
          regexp: "#pool_algorithm = 'ROUND_ROBIN'"
          replace: "pool_algorithm = 'ROUND_ROBIN'"
      
      - name: Set load balacner size
        replace:
          path: /tmp/ncp-rc.yml
          regexp: "#service_size = 'SMALL'"
          replace: "service_size = 'SMALL'"
      
      - name: Set virtual servers
        replace:
          path: /tmp/ncp-rc.yml
          regexp: "#virtual_servers_per_lbs = 10"
          replace: "virtual_servers_per_lbs = 10"
  
      - name: Set T0 router
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^ *#?tier0_router =.*"
          line: "    tier0_router = {{ tier0_router }}"
  
      - name: Set overlay tz
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^ *#?overlay_tz =.*"
          line: "    overlay_tz = {{ overlay_tz }}"
  
      - name: Set ip block
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^ *#?container_ip_blocks =.*"
          line: "    container_ip_blocks = {{ container_ip_blocks }}"
  
      - name: Set external ip pool
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^ *#?external_ip_pools =.*"
          line: "    external_ip_pools = {{ external_ip_pools }}"
          
      - name: Set firewall top
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^ *#?top_firewall_section_marker =.*"
          line: "    top_firewall_section_marker = {{ top_firewall_section_marker }}"
          
      - name: Set firewall bottom
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^ *#?bottom_firewall_section_marker =.*"
          line: "    bottom_firewall_section_marker = {{ bottom_firewall_section_marker }}"
          
          
      - name: Set service account for ncp
        replace:
          path: /tmp/ncp-rc.yml
          regexp: "#serviceAccountName: ncp-svc-account"
          replace: "serviceAccountName: ncp-svc-account"
  
      - name: Set master node
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^ *#?kubernetes.io/hostname: .*"
          line: "        kubernetes.io/hostname: {{ master_node }}"
          
      - name: Set NSX manager IP
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^ *#?nsx_api_managers =.*"
          line: "    nsx_api_managers = {{ nsx_manager_ip }}"
      
      - name: Set NSX API password
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^    nsx_api_password"
          insertafter: "^ *nsx_api_managers"
          line: "    nsx_api_password = {{ nsx_api_password | replace('$', '$$') }}"
      
      - name: Set NSX API username
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^    nsx_api_user"
          insertafter: "^ *nsx_api_managers"
          line: "    nsx_api_user = {{ nsx_api_user }}"
        when: use_cert != true
      
      - name: Skip checking certs
        lineinfile:
          path: /tmp/ncp-rc.yml
          regexp: "^ *#?insecure =.*"
          line: "    insecure = True"
      
      - name: Set certificate info if set cert is set to true
        replace:
            path: /tmp/ncp-rc.yml
            regexp: "#nsx_api_cert_file = <None>"
            replace: "nsx_api_cert_file = /etc/nsx-ujo/nsx_cert"
        when: use_cert == true
      
      - name: Set private key if set cert is set to true
        replace:
              path: /tmp/ncp-rc.yml
              regexp: "#nsx_api_private_key_file = <None>"
              replace: "nsx_api_private_key_file = /etc/nsx-ujo/nsx_priv_key"
        when: use_cert == true
      
      # Ensure idempotency
      - name: Check whether /tmp/ncp-rc.yml contains "nsx-priv-key"
        command: grep "nsx-priv-key" /tmp/ncp-rc.yml
        register: checkpriv
        ignore_errors: yes
      
      - name: if /tmp/ncp-rc.yml does not contain "nsx-priv-key"
        lineinfile:
            path: /tmp/ncp-rc.yml
            regexp: "^    volumeMounts"
            insertafter: "^ *volumeMounts:"
            line: "          - name: nsx-priv-key\n            mountPath: /etc/nsx-ujo/nsx_priv_key"
        when: checkpriv.rc != 0 and use_cert == true
      
      - name: Greet the world if /tmp/ncp-rc.yml contains "nsx-priv-key"
        lineinfile:
            path: /tmp/ncp-rc.yml
            regexp: "^    volumes"
            insertafter: "^ *volumes:"
            line: "        - name: nsx-priv-key\n          hostPath:\n            path: {{ nsx_api_private_key_file }}"
        when: checkpriv.rc != 0 and use_cert == true
      
      - name: Check whether /tmp/ncp-rc.yml contains "nsx-cert"
        command: grep "nsx-cert" /tmp/ncp-rc.yml
        register: checkcert
        ignore_errors: yes
      
      - name: if /tmp/ncp-rc.yml does not contain "nsx-cert"
        lineinfile:
            path: /tmp/ncp-rc.yml
            regexp: "^    volumeMounts"
            insertafter: "^ *volumeMounts:"
            line: "          - name: nsx-cert\n            mountPath: /etc/nsx-ujo/nsx_cert"
        when: checkcert.rc != 0 and use_cert == true
      
      - name: Greet the world if /tmp/ncp-rc.yml contains "nsx-cert"
        lineinfile:
            path: /tmp/ncp-rc.yml
            regexp: "^    volumes"
            insertafter: "^ *volumes:"
            line: "        - name: nsx-cert\n          hostPath:\n            path: {{ nsx_api_cert_file }}"
        when: checkcert.rc != 0 and use_cert == true
      
      - name: Start NCP Replication Controller
        command: kubectl -n nsx-system  apply -f /tmp/ncp-rc.yml
      
      ## nsx-node-agent YAML
      - name: copy agent yaml
        copy:
          src: ../files/nsx-node-agent-ds.yml
          dest: /tmp/nsx-node-agent-ds.yml
          force: yes
          
      - name: Set service account for ncp
        replace:
          path: /tmp/nsx-node-agent-ds.yml
          regexp: "#serviceAccountName: nsx-node-agent-svc-account"
          replace: "serviceAccountName: nsx-node-agent-svc-account"
      
      - name: Set cluster name
        lineinfile:
          path: /tmp/nsx-node-agent-ds.yml
          regexp: "^ *#?cluster =.*"
          line: "    cluster = {{ cluster_name }}"
      
      - name: Set apiserver host IP
        lineinfile:
          path: /tmp/nsx-node-agent-ds.yml
          regexp: "^ *#?apiserver_host_ip =.*"
          line: "    apiserver_host_ip = {{ apiserver_host_ip }}"
      
      - name: Set apiserver host port
        lineinfile:
          path: /tmp/nsx-node-agent-ds.yml
          regexp: "^ *#?apiserver_host_port =.*"
          line: "    apiserver_host_port = 6443"
  
          
      - name: Start nsx-node-agent DaemonSet
        command: kubectl -n nsx-system apply -f /tmp/nsx-node-agent-ds.yml
      when: ansible_distribution == 'Red Hat Enterprise Linux'        
